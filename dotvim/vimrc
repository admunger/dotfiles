set nocompatible
" set langmenu=en_US
" let $LANG = 'en_US'

execute pathogen#infect()

" disable bell
set noerrorbells novisualbell 
set belloff=all
set t_vb=

"========= GENERAL OPTIONS =========

"Option to remove any traces in .viminfo
set viminfo=/5,'2,:5,<0,@0,f0
"            |  |  |  |  |  '-file marks 0-9,A-Z not saved               
"            |  |  |  |  '-input-line history not saved
"            |  |  |  '-registers not saved
"            |  |  '-5 last command-line history saved
"            |  '-2 last file mark positions saved
"            '-5 recent search history will be saved
"        no % : buffer list not saved

set swapfile
"ruler options
set ruler
set number
set relativenumber
" do not search further 1st modeline
set nomodeline
" set modelines=1

"menu complete
set wildmenu
set wildmode=longest,full
set wildignore=*.pdf,*.png,*.eps,*.o
"case-insensitive file completion
set wildignorecase
" remove search in /usr/include files
setglobal complete-=i

" split configs
set splitright
set splitbelow

set magic
vmap C "+y
set whichwrap+=<,>,[,]

"Options for search features
set hlsearch
set incsearch
set ignorecase
set smartcase

"----- NAVIGATION -----
if has('mouse')
    set mouse=a
    set ttymouse=xterm2
    map <ScrollWheelUp>   5<C-Y>
    map <ScrollWheelDown> 5<C-E>
endif
set scrolloff=4
set foldlevelstart=99
set foldmethod=syntax
set whichwrap+=<,>,[,]
set backspace=indent,eol,start
set nostartofline "stays in current column if possible with G/gg
set linebreak

"These 2 filetypes BEFORE "syntax on"
filetype plugin indent on
syntax on

"========= GUI/color configurations =========
set t_Co=256 "256 colors
"gvim configs
if has('gui_running')
    " colorscheme badwolf "gurunew
    colorscheme badwolf "gurunew
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar

    "specify initial dimensions of the window
    set lines=50 columns=80
    set guitablabel=%N\ %t
elseif exists('$TMUX')
    colorscheme monokai-phoenix "munger2
else
    colorscheme monokai-phoenix "eldar elflord
    "set to goldenrod for gray comments
endif

if &diff
    colorscheme goldenrod
endif


set tabstop=4
set shiftwidth=4
set smarttab
set smartindent
set expandtab

" the default encoding is utf-8
set termencoding=utf-8
set encoding=utf-8
scriptencoding utf-8 "else listchars command would throw an error
" view tabs in file
set list
set listchars=tab:→\ 

set clipboard=unnamedplus
" set cindent  "indent like C code
"Indentation for makefiles
"set noet ci pi sts=0 sw=4 ts=4
set iskeyword-=58 "colon


"set shell=/bin/bash\ -i

"========= STATUS LINE CONFIGURATION =========
set laststatus=2
set statusline=   " clear the statusline for when vimrc is reloaded
set statusline+=%-3.3n\                      " buffer number
set statusline+=%t\                          " file name
set statusline+=%h%m%r%w                     " flags
set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
set statusline+=\ %{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=\ %{&fileformat}]              " file format
set statusline+=%=                           " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
"set statusline+=%b,0x%-8B\                   " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"AIRLINE IS NOT USED FOR THE MOMENT
"airline status-line
"airline disabling switch
let g:loaded_airline = 1
if g:loaded_airline
    let g:airline_section_b = '%f'
    let g:airline_section_c = '%{strlen(&fenc)?&fenc:&enc}, %{&fileformat}'
    let g:airline_section_d = "%{synIDattr(synID(line('.'),col('.'),1),'name')}"
    let g:airline#extensions#default#layout = [
          \ [ 'a', 'b', 'c' ],
          \ [ 'x', 'z', 'error', 'warning' ]
          \ ]
    let g:airline#extensions#tabline#enabled = 0
    " let g:airline#extensions#tabline#left_sep = ' '
    " let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline_theme='dark' " :AirlineTheme
endif


"========= Shortcut mappings =========
"----- SET LEADER -----
let mapleader="é"
"maplocalleader -> leader for specific filetype

"Map arrow keys to visible lines (editing text)
nnoremap <up> gk
nnoremap <down> gj
inoremap <up> <C-o>gk
inoremap <down> <C-o>gj
vnoremap <up> gk
vnoremap <down> gj
inoremap <C-f> <C-o>l
inoremap <C-b> <C-o>h
"inoremap <C-n> <C-o>j
"inoremap <C-p> <C-o>k

"Fuck Ex mode
nnoremap Q <nop>

nmap <leader><Space> :%s@<C-r>/@@gn<CR>

"navigation between splits
"nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

inoremap <C-s> <C-o>:update<CR>
nnoremap <C-s> :update<CR>

"remove search highlight
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" recursively search pattern under cursor within directory
nmap <leader>/ :vimgrep /\<<C-R><C-W>\>/g **/*.\(cxx\\\|h\)

" remove previous quickfix searches
set cscopequickfix=s-
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>
nnoremap ]Q :clast<CR>
nnoremap [Q :cfirst<CR>

" use CTRL-A to go to beginning of a command
cmap <c-a> <c-b>


" shortcuts for common commands
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev W w
cnoreabbrev Wq wq
cnoreabbrev Ed ed
cnoreabbrev ta tabnew
cnoreabbrev NT call NT()

"cd to current buffer
"autocmd BufEnter * silent! lcd %:p:h

" restore Normal terminal background; black
autocmd VimLeave * hi Normal ctermbg=016_Grey0
autocmd FilterWritePre * if &diff | setlocal wrap< | endif
"This is a troll to test
"autocmd VimLeave * silent! !cowsay "Surprise\!\!\!" && read

"############ PLUGIN CONFIGURATIONS ############

"NERDTree configuration
let NERDTreeIgnore = ['\.dll$','\.pdb$','\.suo$','\.sdf$']
let NERDTreeWinSize=40

function g:NT()
    if !empty(&ft)
        NERDTreeFind
    else
        NERDTree
    end
    echo
endfunction

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

"Tags options
"Exuberant-ctags location
let Tlist_Ctags_Cmd='/usr/bin/ctags'
let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
let Tlist_Show_One_File = 1 "show tags of only one file
let g:Tlist_Use_Split_Window = 0
let g:Tlist_Display_Prototype = 0
let g:tlist_cpp_settings = 'c++;d:macro;' . 'c:class;g:enum;s:struct;u:union;f:function'
set cscopetag "check cscope before ctags
" avoid tag duplicates in case TAGS and tags exists
set tags=tags

"CSV parameters
" NewDelimiter ; "changes the delimiter
" let g:csv_delim=';'

"EasyAlign plugin
"nnoremap ga :EasyAlign<CR>

"========= Filetype-specific configurations =========
" start with all the folds open
" autocmd Syntax org,tex normal zR
set foldmethod=expr
" set foldmethod=indent
let asmsyntax='armasm'
let filetype_inc='armasm'

"############ GENERIC AUTOCOMMANDS ############

" prefered indentation
autocmd FileType c,cpp,xml setlocal tabstop=2 shiftwidth=2
" " sets the Comment string to each filetype at load
" autocmd BufReadPost,BufNewFile * let b:bufComment = FT_getComment()
"disable auto-commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"enable omni completion for C++
au BufNewFile,BufRead,BufEnter *.cpp,*.hpp,*.cc,*.hh set omnifunc=omni#cpp#complete#Main
"specific completion when in C
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd Filetype csv setlocal nowrap "guioptions+=b

" jump to last position in file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" vimdiff config
set diffopt+=iwhite
set diffopt+=algorithm:minimal

" vim -b : edit binary using xxd-format!
" :%!xxd
" :set ft=xxd
augroup Binary
    au!
    au BufReadPre  *.bin let &bin=1
    au BufReadPost *.bin if &bin | %!xxd
    au BufReadPost *.bin set ft=xxd | endif
    au BufWritePre *.bin if &bin | %!xxd -r
    au BufWritePre *.bin endif
    au BufWritePost *.bin if &bin | %!xxd
    au BufWritePost *.bin set nomod | endif
augroup END

